{
    "openapi": "3.0.0",
    "info": {
        "title": "Energy Monitor API",
        "version": "1.0"
    },
    "paths": {
        "/api/config/command/{identifier}": {
            "get": {
                "tags": [
                    "commands"
                ],
                "summary": "Get a command by ID or name",
                "description": "Retrieves a specific command by its ID or name.",
                "operationId": "getCommandByIdentifier",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "ID or name of the command",
                        "schema": {
                            "type": "string",
                            "example": ""
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of commands",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/command": {
            "post": {
                "tags": [
                    "commands"
                ],
                "summary": "Create a new command in Emca Monitor",
                "description": "Creates a new command with the provided parameters.",
                "operationId": "createCommand",
                "requestBody": {
                    "description": "command details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "command_line",
                                    "command_name",
                                    "file_id"
                                ],
                                "properties": {
                                    "command_name": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "command_line": {
                                        "type": "string",
                                        "example": "$USER1$/check_ftp -H $HOSTADDRESS$ $ARG1$"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/commands.cfg"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "command created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "command created successfully"
                                        },
                                        "command": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "command_description": [
                                                    "The command_description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/command/{id}": {
            "put": {
                "tags": [
                    "commands"
                ],
                "summary": "Update a command in Emca Monitor",
                "description": "Updates an existing command with the provided parameters.",
                "operationId": "updateCommand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the command to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "command details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "command_line",
                                    "command_name",
                                    "file_id"
                                ],
                                "properties": {
                                    "command_name": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "command_line": {
                                        "type": "string",
                                        "example": "$USER1$/check_ftp -H $HOSTADDRESS$ $ARG1$"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/commands.cfg"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "command updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "command updated successfully"
                                        },
                                        "command": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "command not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "command not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "commands"
                ],
                "summary": "Delete a command in op5 Monitor",
                "description": "Deletes an existing command.",
                "operationId": "deleteCommand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the command to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "command deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "command deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "command not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "command not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/command/{command}": {
            "patch": {
                "tags": [
                    "commands"
                ],
                "summary": "Patch/update a command in Emca Monitor",
                "description": "Updates an existing command with the provided parameters.",
                "operationId": "patchCommand",
                "parameters": [
                    {
                        "name": "command",
                        "in": "path",
                        "description": "ID or name of the command to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Command details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "command_line": {
                                        "type": "string",
                                        "example": "$USER1$/check_ftp -H $HOSTADDRESS$ $ARG1$"
                                    },
                                    "command_name": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/commands.cfg"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Command patched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Command patched successfully"
                                        },
                                        "command": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Command not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Command not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/contact/{identifier}": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get all contacts or single contact in Emca Monitor",
                "description": "Retrieves a list of all contacts or a specific contact by ID or name.",
                "operationId": "getAllContacts",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "ID or name of the contact (optional)",
                        "schema": {
                            "type": "string",
                            "example": ""
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/contact": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Create a new contact in Emca Monitor",
                "description": "Creates a new contact with the provided parameters.",
                "operationId": "createContact",
                "requestBody": {
                    "description": "contact details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "alias",
                                    "contact_name",
                                    "host_notification_options",
                                    "host_notification_period",
                                    "service_notification_options",
                                    "service_notification_period"
                                ],
                                "properties": {
                                    "alias": {
                                        "type": "string",
                                        "example": "New test contact"
                                    },
                                    "contact_name": {
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/contacts.cfg"
                                    },
                                    "host_notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "d"
                                        }
                                    },
                                    "host_notification_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "service_notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "c"
                                        }
                                    },
                                    "service_notification_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "address1": {
                                        "type": "string",
                                        "example": "address1"
                                    },
                                    "address2": {
                                        "type": "string",
                                        "example": "address2"
                                    },
                                    "address3": {
                                        "type": "string",
                                        "example": "address3"
                                    },
                                    "address4": {
                                        "type": "string",
                                        "example": "address4"
                                    },
                                    "address5": {
                                        "type": "string",
                                        "example": "address5"
                                    },
                                    "address6": {
                                        "type": "string",
                                        "example": "address6"
                                    },
                                    "can_submit_commands": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "contactgroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "admin"
                                        }
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "test@gmail.com"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "admin"
                                        }
                                    },
                                    "host_notification_cmds": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "host_notification_cmds_args": {
                                        "type": "string",
                                        "example": "host_notification_cmds_args"
                                    },
                                    "host_notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "pager": {
                                        "type": "string",
                                        "example": "pager"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_nonstatus_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "service_notification_cmds": {
                                        "type": "string",
                                        "example": "notify-service-by-email"
                                    },
                                    "service_notification_cmds_args": {
                                        "type": "string",
                                        "example": "service_notification_cmds_args"
                                    },
                                    "service_notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "template": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "contact created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "contact created successfully"
                                        },
                                        "contact": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "contact_description": [
                                                    "The contact_description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/contact/{id}": {
            "put": {
                "tags": [
                    "contacts"
                ],
                "summary": "Update a contact in Emca Monitor",
                "description": "Updates an existing contact with the provided parameters.",
                "operationId": "updateContact",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the contact to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "contact details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "alias",
                                    "contact_name",
                                    "file_id",
                                    "host_notification_options",
                                    "host_notification_period",
                                    "service_notification_options",
                                    "service_notification_period"
                                ],
                                "properties": {
                                    "alias": {
                                        "type": "string",
                                        "example": "New test contact"
                                    },
                                    "contact_name": {
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/contacts.cfg"
                                    },
                                    "host_notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "d"
                                        }
                                    },
                                    "host_notification_period": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "service_notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "w"
                                        }
                                    },
                                    "service_notification_period": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "address1": {
                                        "type": "string",
                                        "example": "address1"
                                    },
                                    "address2": {
                                        "type": "string",
                                        "example": "address2"
                                    },
                                    "address3": {
                                        "type": "string",
                                        "example": "address3"
                                    },
                                    "address4": {
                                        "type": "string",
                                        "example": "address4"
                                    },
                                    "address5": {
                                        "type": "string",
                                        "example": "address5"
                                    },
                                    "address6": {
                                        "type": "string",
                                        "example": "address6"
                                    },
                                    "can_submit_commands": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "contactgroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "test@gmail.com"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "host_notification_cmds": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "host_notification_cmds_args": {
                                        "type": "string",
                                        "example": "host_notification_cmds_args"
                                    },
                                    "host_notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "pager": {
                                        "type": "string",
                                        "example": "pager"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_nonstatus_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "service_notification_cmds": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "service_notification_cmds_args": {
                                        "type": "string",
                                        "example": "service_notification_cmds_args"
                                    },
                                    "service_notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "template": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "contact updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "contact updated successfully"
                                        },
                                        "contact": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "contact not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "contact not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "contacts"
                ],
                "summary": "Delete a Contact in op5 Monitor",
                "description": "Deletes an existing Contact.",
                "operationId": "deleteContact",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Contact to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Contact not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "contacts"
                ],
                "summary": "Update a contact in Emca Monitor",
                "description": "Updates an existing contact with the provided parameters.",
                "operationId": "patchContact",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the contact to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "contact details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "alias",
                                    "contact_name",
                                    "file_id",
                                    "host_notification_options",
                                    "host_notification_period",
                                    "service_notification_options",
                                    "service_notification_period"
                                ],
                                "properties": {
                                    "alias": {
                                        "type": "string",
                                        "example": "New test contact"
                                    },
                                    "contact_name": {
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/contacts.cfg"
                                    },
                                    "host_notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "d"
                                        }
                                    },
                                    "host_notification_period": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "service_notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "w"
                                        }
                                    },
                                    "service_notification_period": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "address1": {
                                        "type": "string",
                                        "example": "address1"
                                    },
                                    "address2": {
                                        "type": "string",
                                        "example": "address2"
                                    },
                                    "address3": {
                                        "type": "string",
                                        "example": "address3"
                                    },
                                    "address4": {
                                        "type": "string",
                                        "example": "address4"
                                    },
                                    "address5": {
                                        "type": "string",
                                        "example": "address5"
                                    },
                                    "address6": {
                                        "type": "string",
                                        "example": "address6"
                                    },
                                    "can_submit_commands": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "contactgroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "test@gmail.com"
                                    },
                                    "groups": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "host_notification_cmds": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "host_notification_cmds_args": {
                                        "type": "string",
                                        "example": "host_notification_cmds_args"
                                    },
                                    "host_notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "pager": {
                                        "type": "string",
                                        "example": "pager"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_nonstatus_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "service_notification_cmds": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "service_notification_cmds_args": {
                                        "type": "string",
                                        "example": "service_notification_cmds_args"
                                    },
                                    "service_notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "template": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "contact updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "contact updated successfully"
                                        },
                                        "contact": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "contact not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "contact not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/host/{host}": {
            "get": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Get all hosts in Emca Monitor",
                "description": "Retrieves a list of all hosts or a specific host by ID or name.",
                "operationId": "getAllHosts",
                "parameters": [
                    {
                        "name": "host",
                        "in": "path",
                        "description": "ID or name of the host (optional)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of hosts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Update a host in Emca Monitor",
                "description": "Updates an existing host with the provided parameters.",
                "operationId": "updateHost",
                "parameters": [
                    {
                        "name": "host",
                        "in": "path",
                        "description": "ID or Name of the host to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Host details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "file_id",
                                    "host_name",
                                    "max_check_attempts",
                                    "notification_interval",
                                    "notification_options",
                                    "notification_period",
                                    "template"
                                ],
                                "properties": {
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/templates/hosts.cfg"
                                    },
                                    "host_name": {
                                        "type": "string",
                                        "example": "example-host"
                                    },
                                    "max_check_attempts": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "notification_interval": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "d"
                                        }
                                    },
                                    "notification_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "2d_coords": {
                                        "type": "string",
                                        "example": "50,50"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "http://example.com"
                                    },
                                    "active_checks_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "192.168.1.1"
                                    },
                                    "alias": {
                                        "type": "string",
                                        "example": "Sample Alias"
                                    },
                                    "check_command": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "check_command_args": {
                                        "type": "string",
                                        "example": "-w 5 -c 10"
                                    },
                                    "check_freshness": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "check_interval": {
                                        "type": "integer",
                                        "example": 15
                                    },
                                    "check_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "contact_groups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "group-1"
                                        }
                                    },
                                    "contacts": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "john_doe"
                                        }
                                    },
                                    "display_name": {
                                        "type": "string",
                                        "example": "Display Name"
                                    },
                                    "event_handler": {
                                        "type": "string",
                                        "example": 1
                                    },
                                    "event_handler_args": {
                                        "type": "string",
                                        "example": "--arg1 --arg2"
                                    },
                                    "event_handler_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "first_notification_delay": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "flap_detection_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "flap_detection_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "o"
                                        }
                                    },
                                    "freshness_threshold": {
                                        "type": "integer",
                                        "example": 60
                                    },
                                    "high_flap_threshold": {
                                        "type": "integer",
                                        "example": 30
                                    },
                                    "hostgroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "linux-servers"
                                        }
                                    },
                                    "icon_image": {
                                        "type": "string",
                                        "example": "icon.png"
                                    },
                                    "icon_image_alt": {
                                        "type": "string",
                                        "example": "Icon Alt Text"
                                    },
                                    "low_flap_threshold": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Additional notes for the host"
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": "http://example.com/notes"
                                    },
                                    "notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "obsess": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "passive_checks_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "process_perf_data": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_nonstatus_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retry_interval": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "stalking_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "n"
                                        }
                                    },
                                    "statusmap_image": {
                                        "type": "string",
                                        "example": "statusmap.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Host updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host updated successfully"
                                        },
                                        "host": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Host not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/host": {
            "post": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Create a new host in Emca Monitor",
                "description": "Creates a new host with the provided parameters.",
                "operationId": "createHost",
                "requestBody": {
                    "description": "Host details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "file_id",
                                    "host_name",
                                    "max_check_attempts",
                                    "notification_interval",
                                    "notification_options",
                                    "notification_period",
                                    "template"
                                ],
                                "properties": {
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/templates/hosts.cfg"
                                    },
                                    "host_name": {
                                        "type": "string",
                                        "example": "example-host"
                                    },
                                    "max_check_attempts": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "notification_interval": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "d"
                                        }
                                    },
                                    "notification_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "template": {
                                        "type": "string",
                                        "example": "default-host-template"
                                    },
                                    "2d_coords": {
                                        "type": "string",
                                        "example": "50,50"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "http://example.com"
                                    },
                                    "active_checks_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "192.168.1.1"
                                    },
                                    "alias": {
                                        "type": "string",
                                        "example": "Sample Alias"
                                    },
                                    "check_command": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "check_command_args": {
                                        "type": "string",
                                        "example": "-w 5 -c 10"
                                    },
                                    "check_freshness": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "check_interval": {
                                        "type": "integer",
                                        "example": 15
                                    },
                                    "check_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "contact_groups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "group-1"
                                        }
                                    },
                                    "contacts": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "john_doe"
                                        }
                                    },
                                    "display_name": {
                                        "type": "string",
                                        "example": "Display Name"
                                    },
                                    "event_handler": {
                                        "type": "string",
                                        "example": 1
                                    },
                                    "event_handler_args": {
                                        "type": "string",
                                        "example": "--arg1 --arg2"
                                    },
                                    "event_handler_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "first_notification_delay": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "flap_detection_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "flap_detection_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "o"
                                        }
                                    },
                                    "freshness_threshold": {
                                        "type": "integer",
                                        "example": 60
                                    },
                                    "high_flap_threshold": {
                                        "type": "integer",
                                        "example": 30
                                    },
                                    "hostgroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "linux-servers"
                                        }
                                    },
                                    "icon_image": {
                                        "type": "string",
                                        "example": "icon.png"
                                    },
                                    "icon_image_alt": {
                                        "type": "string",
                                        "example": "Icon Alt Text"
                                    },
                                    "low_flap_threshold": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Additional notes for the host"
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": "http://example.com/notes"
                                    },
                                    "notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "obsess": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "passive_checks_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "process_perf_data": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_nonstatus_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retry_interval": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "stalking_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "n"
                                        }
                                    },
                                    "statusmap_image": {
                                        "type": "string",
                                        "example": "statusmap.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Host created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host created successfully"
                                        },
                                        "host": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "host_name": [
                                                    "The host_name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/host/{hostName}": {
            "patch": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Update a host in Emca Monitor",
                "description": "Updates an existing host with the provided parameters.",
                "operationId": "patchHost",
                "parameters": [
                    {
                        "name": "hostName",
                        "in": "path",
                        "description": "ID or Name of the host to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Host details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "file_id",
                                    "host_name",
                                    "max_check_attempts",
                                    "notification_interval",
                                    "notification_options",
                                    "notification_period",
                                    "template"
                                ],
                                "properties": {
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/templates/hosts.cfg"
                                    },
                                    "host_name": {
                                        "type": "string",
                                        "example": "example-host"
                                    },
                                    "max_check_attempts": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "notification_interval": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "d"
                                        }
                                    },
                                    "notification_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "2d_coords": {
                                        "type": "string",
                                        "example": "50,50"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "http://example.com"
                                    },
                                    "active_checks_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "192.168.1.1"
                                    },
                                    "alias": {
                                        "type": "string",
                                        "example": "Sample Alias"
                                    },
                                    "check_command": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "check_command_args": {
                                        "type": "string",
                                        "example": "-w 5 -c 10"
                                    },
                                    "check_freshness": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "check_interval": {
                                        "type": "integer",
                                        "example": 15
                                    },
                                    "check_period": {
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "contact_groups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "group-1"
                                        }
                                    },
                                    "contacts": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "john_doe"
                                        }
                                    },
                                    "display_name": {
                                        "type": "string",
                                        "example": "Display Name"
                                    },
                                    "event_handler": {
                                        "type": "string",
                                        "example": 1
                                    },
                                    "event_handler_args": {
                                        "type": "string",
                                        "example": "--arg1 --arg2"
                                    },
                                    "event_handler_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "first_notification_delay": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "flap_detection_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "flap_detection_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "o"
                                        }
                                    },
                                    "freshness_threshold": {
                                        "type": "integer",
                                        "example": 60
                                    },
                                    "high_flap_threshold": {
                                        "type": "integer",
                                        "example": 30
                                    },
                                    "hostgroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "linux-servers"
                                        }
                                    },
                                    "icon_image": {
                                        "type": "string",
                                        "example": "icon.png"
                                    },
                                    "icon_image_alt": {
                                        "type": "string",
                                        "example": "Icon Alt Text"
                                    },
                                    "low_flap_threshold": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Additional notes for the host"
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": "http://example.com/notes"
                                    },
                                    "notifications_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "obsess": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "passive_checks_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "process_perf_data": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_nonstatus_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retry_interval": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "stalking_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "n"
                                        }
                                    },
                                    "statusmap_image": {
                                        "type": "string",
                                        "example": "statusmap.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Host updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host updated successfully"
                                        },
                                        "host": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Host not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/host/{id}": {
            "delete": {
                "tags": [
                    "Hosts"
                ],
                "summary": "Delete a host in Emca Monitor",
                "description": "Deletes an existing host.",
                "operationId": "deleteHost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the host to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Host deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Host not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/hostgroup": {
            "get": {
                "tags": [
                    "HostGroups"
                ],
                "summary": "Get all Host Groups or single hostGroup in Emca Monitor",
                "description": "Retrieves a list of all Host Groups or a specific hostGroup by ID or name.",
                "operationId": "getAllhostGroups",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "query",
                        "description": "ID or name of the hostGroup (optional)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Host Groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "HostGroups"
                ],
                "summary": "Create a new HostGroup in Emca Monitor",
                "description": "Creates a new HostGroup with the provided parameters.",
                "operationId": "createHostGroups",
                "requestBody": {
                    "description": "command details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "hostgroup_name",
                                    "file_id"
                                ],
                                "properties": {
                                    "hostgroup_name": {
                                        "type": "string",
                                        "example": "host_group"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/localhost.cfg"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "alias": {
                                        "type": "string",
                                        "example": "..alias"
                                    },
                                    "hostgroup_members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "hostGroup_member_id"
                                        }
                                    },
                                    "members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "member_id"
                                        }
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "register": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Host Group created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host Group created successfully"
                                        },
                                        "hostGroup": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "Host Group description": [
                                                    "The Host Group description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/hostgroup/{id}": {
            "put": {
                "tags": [
                    "HostGroups"
                ],
                "summary": "Update an existing HostGroup in Emca Monitor",
                "description": "Updates an existing HostGroup with the provided parameters.",
                "operationId": "updateHostGroups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID or name of the HostGroup to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated HostGroup details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "hostgroup_name",
                                    "file_id"
                                ],
                                "properties": {
                                    "hostgroup_name": {
                                        "type": "string",
                                        "example": "host_group"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/localhost.cfg"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "alias": {
                                        "type": "integer",
                                        "example": "alias"
                                    },
                                    "hostgroup_members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "hostGroup_member_id"
                                        }
                                    },
                                    "members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "member_id"
                                        }
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "register": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Host Group updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host Group updated successfully"
                                        },
                                        "hostGroup": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "Host Group description": [
                                                    "The Host Group description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Host Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host Group not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "HostGroups"
                ],
                "summary": "Delete a specific Host Groups in Emca Monitor",
                "description": "Deletes a Host Groups by ID or name.",
                "operationId": "deleteHostGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID or name of the Host Groups to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Host Groups deleted successfully"
                    },
                    "404": {
                        "description": "Host Groups not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Host Groups not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/hostgroup/{hostgroup}": {
            "patch": {
                "tags": [
                    "HostGroups"
                ],
                "summary": "Update an existing HostGroup in Emca Monitor",
                "description": "Updates an existing HostGroup with the provided parameters.",
                "operationId": "updateHostGroup",
                "parameters": [
                    {
                        "name": "hostgroup",
                        "in": "path",
                        "description": "ID or name of the HostGroup to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated HostGroup details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "file_id"
                                ],
                                "properties": {
                                    "hostgroup_name": {
                                        "type": "string",
                                        "example": "updated_host_group_name"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/localhost.cfg"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "notify-host-by-email"
                                    },
                                    "alias": {
                                        "type": "integer",
                                        "example": "alias"
                                    },
                                    "hostgroup_members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "hostGroup_member_id"
                                        }
                                    },
                                    "members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "member_id"
                                        }
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Updated notes for the host group"
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": "http://example.com/updated_notes"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Host Group updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host Group updated successfully"
                                        },
                                        "hostGroup": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "Host Group description": [
                                                    "The Host Group description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Host Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Host Group not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/service/{hostName}/{serviceDescription}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get all services or single service in Emca Monitor",
                "description": "Retrieves a list of all Services or a specific service by ID or name.",
                "operationId": "getAllServices",
                "parameters": [
                    {
                        "name": "serviceDescription",
                        "in": "path",
                        "description": "ID or name of the service (optional)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hostName",
                        "in": "path",
                        "description": "ID or name of the host (optional)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/service": {
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service in Emca Monitor",
                "description": "Creates a new service with the provided parameters.",
                "operationId": "createService",
                "requestBody": {
                    "description": "Service details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "max_check_attempts",
                                    "host_name",
                                    "service_description",
                                    "file_id",
                                    "notification_interval"
                                ],
                                "properties": {
                                    "max_check_attempts": {
                                        "description": "Tells op5 Monitor how many times it should retry a service / host before it changes to HARD.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 3
                                    },
                                    "host_name": {
                                        "description": "Identifies a host in op5 Monitor. Many hosts can share the same IP, but no two hosts can have the same host_name.",
                                        "type": "string",
                                        "example": "localhost"
                                    },
                                    "service_description": {
                                        "description": "A description of the service in question. This, together with 'host_name', also identifies the service.",
                                        "type": "string",
                                        "example": "Web Server"
                                    },
                                    "check_command": {
                                        "description": "Reference pointer to command_name. This tells Monitor which command should be run to determine the status of the host or service.",
                                        "type": "string",
                                        "example": "notify-service-by-email"
                                    },
                                    "check_command_args": {
                                        "description": "Arguments that can be passed to the command_name. Some check_commands need arguments and some don't.",
                                        "type": "string",
                                        "example": "--ssl"
                                    },
                                    "obsess": {
                                        "description": "If activated, the obsessive-compulsive service processing (OCSP) command will be executed after each check for this service.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "register": {
                                        "description": "If this is set to on, the object is considered to be part of the configuration. Otherwise, it used as a template.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "file_id": {
                                        "description": "Tells op5 Monitor in which file this object should be stored.",
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/templates/services.cfg"
                                    },
                                    "is_volatile": {
                                        "description": "Volatile services differ from 'normal' services in three important ways.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "check_interval": {
                                        "description": "Tells Monitor how often (in minutes) it should check the services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 5
                                    },
                                    "retry_interval": {
                                        "description": "Tells op5 Monitor how many minutes it should wait before retrying a check that is in a non-OK state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 2
                                    },
                                    "active_checks_enabled": {
                                        "description": "Tells op5 Monitor whether or not active checks should be performed for this host or service.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "passive_checks_enabled": {
                                        "description": "Tells whether this service accepts passive check results or not.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "check_period": {
                                        "description": "This directive is used to specify during which time_period active checks for this host could be executed.",
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "event_handler_enabled": {
                                        "description": "Tells op5 Monitor if event handlers (if configured) should be enabled.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "flap_detection_enabled": {
                                        "description": "If a host or service pends between an OK and a not OK state, the host / service enters 'flapping' state.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "process_perf_data": {
                                        "description": "Tells monitor whether or not it should log processing performance data.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "description": "Tells op5 Monitor whether or not it should auto-save the service's / host's STATUS information.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "retain_nonstatus_information": {
                                        "description": "Tells op5 Monitor whether or not it should auto-save extra information about the host / service every hour.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "notification_interval": {
                                        "description": "Time interval (in minutes) between notifications when a host or service is in a non-OK state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 10
                                    },
                                    "notification_period": {
                                        "description": "Reference to timeperiod_name. Tells monitor during which times notifications should be sent.",
                                        "type": "integer",
                                        "example": "24x7"
                                    },
                                    "notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "c,w"
                                        }
                                    },
                                    "notifications_enabled": {
                                        "description": "Tells monitor if notifications should be sent out when this host or service changes state.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "hostgroup_name": {
                                        "description": "Identifies a hostgroup in op5 Monitor.",
                                        "type": "integer",
                                        "example": "switches"
                                    },
                                    "display_name": {
                                        "description": "This directive is used to define an alternate name that should be displayed in the web interface for this object.",
                                        "type": "string",
                                        "example": "Web Server 1"
                                    },
                                    "servicegroups": {
                                        "description": "A list of service groups that this service is a member of.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "service_group-update-again-2"
                                        }
                                    },
                                    "parallelize_check": {
                                        "description": "Tells op5 Monitor whether the check should be run in parallel with other checks or serial as the only single check being executed at the time.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "check_freshness": {
                                        "description": "This option is used for checking the freshness of a passive service result.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "freshness_threshold": {
                                        "description": "Freshness threshold for passive checks, in seconds.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 300
                                    },
                                    "event_handler": {
                                        "description": "Defines the command that should be run if event handlers are enabled and a status change just occurred.",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "event_handler_args": {
                                        "description": "Arguments to the event handler script.",
                                        "type": "string",
                                        "example": "--arg1 value1"
                                    },
                                    "low_flap_threshold": {
                                        "description": "Flap detection is used to suppress notifications in case of 'unstable' hosts or services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 10
                                    },
                                    "high_flap_threshold": {
                                        "description": "Flap detection is used to suppress notifications in case of 'flapping' hosts or services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 20
                                    },
                                    "flap_detection_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "o"
                                        }
                                    },
                                    "first_notification_delay": {
                                        "description": "The number of time units (usually minutes) to block notifications after a non-OK (possibly soft) state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 5
                                    },
                                    "contacts": {
                                        "description": "This is a list of the contacts that should be notified whenever there are problems (or recoveries) with this object.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "admin1"
                                        }
                                    },
                                    "contact_groups": {
                                        "description": "List of references to contactgroup_name. Tells monitor which contacts should receive notifications when the service / host in question changes state.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "IT Support"
                                        }
                                    },
                                    "stalking_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "n"
                                        }
                                    },
                                    "notes": {
                                        "description": "A more descriptive information for the host or service.",
                                        "type": "string",
                                        "example": "This is a critical service."
                                    },
                                    "notes_url": {
                                        "description": "A URL of your own choice.",
                                        "type": "string",
                                        "example": "https://example.com/service_notes"
                                    },
                                    "action_url": {
                                        "description": "Define an optional URL that can be used to provide more actions on the host.",
                                        "type": "string",
                                        "example": "https://example.com/actions"
                                    },
                                    "icon_image": {
                                        "description": "Defines the icon that will be used at status pages in the web GUI.",
                                        "type": "string",
                                        "example": "icon.png"
                                    },
                                    "icon_image_alt": {
                                        "description": "Defines the alt text that appears when you put the cursor over the icon.",
                                        "type": "string",
                                        "example": "Service Icon"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service created successfully"
                                        },
                                        "service": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "service_description": [
                                                    "The service_description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/service/{resource};{service}": {
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Update a service in Emca Monitor",
                "description": "Updates an existing service with the provided parameters.",
                "operationId": "updateService",
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "description": "ID or Service name, of the service to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resource",
                        "in": "path",
                        "description": "Host or Hostgroup",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parent_type",
                        "in": "query",
                        "description": "Type of the parent (hostgroup)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "hostgroup"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "Service details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "max_check_attempts",
                                    "host_name",
                                    "service_description",
                                    "file_id",
                                    "notification_interval"
                                ],
                                "properties": {
                                    "max_check_attempts": {
                                        "description": "Tells op5 Monitor how many times it should retry a service / host before it changes to HARD.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 3
                                    },
                                    "host_name": {
                                        "description": "Identifies a host in op5 Monitor. Many hosts can share the same IP, but no two hosts can have the same host_name.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 123
                                    },
                                    "service_description": {
                                        "description": "A description of the service in question. This, together with 'host_name', also identifies the service.",
                                        "type": "string",
                                        "example": "Web Server"
                                    },
                                    "check_command": {
                                        "description": "Reference pointer to command_name. This tells Monitor which command should be run to determine the status of the host or service.",
                                        "type": "integer",
                                        "example": "notify-service-by-email"
                                    },
                                    "check_command_args": {
                                        "description": "Arguments that can be passed to the command_name. Some check_commands need arguments and some don't.",
                                        "type": "string",
                                        "example": "--ssl"
                                    },
                                    "obsess": {
                                        "description": "If activated, the obsessive-compulsive service processing (OCSP) command will be executed after each check for this service.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "register": {
                                        "description": "If this is set to on, the object is considered to be part of the configuration. Otherwise, it used as a template.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "file_id": {
                                        "description": "Tells op5 Monitor in which file this object should be stored.",
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/templates/services.cfg"
                                    },
                                    "is_volatile": {
                                        "description": "Volatile services differ from 'normal' services in three important ways.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "check_interval": {
                                        "description": "Tells Monitor how often (in minutes) it should check the services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 5
                                    },
                                    "retry_interval": {
                                        "description": "Tells op5 Monitor how many minutes it should wait before retrying a check that is in a non-OK state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 2
                                    },
                                    "active_checks_enabled": {
                                        "description": "Tells op5 Monitor whether or not active checks should be performed for this host or service.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "passive_checks_enabled": {
                                        "description": "Tells whether this service accepts passive check results or not.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "check_period": {
                                        "description": "This directive is used to specify during which time_period active checks for this host could be executed.",
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "event_handler_enabled": {
                                        "description": "Tells op5 Monitor if event handlers (if configured) should be enabled.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "flap_detection_enabled": {
                                        "description": "If a host or service pends between an OK and a not OK state, the host / service enters 'flapping' state.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "process_perf_data": {
                                        "description": "Tells monitor whether or not it should log processing performance data.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "description": "Tells op5 Monitor whether or not it should auto-save the service's / host's STATUS information.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "retain_nonstatus_information": {
                                        "description": "Tells op5 Monitor whether or not it should auto-save extra information about the host / service every hour.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "notification_interval": {
                                        "description": "Time interval (in minutes) between notifications when a host or service is in a non-OK state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 10
                                    },
                                    "notification_period": {
                                        "description": "Reference to timeperiod_name. Tells monitor during which times notifications should be sent.",
                                        "type": "integer",
                                        "example": "24x7"
                                    },
                                    "notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "c,w"
                                        }
                                    },
                                    "notifications_enabled": {
                                        "description": "Tells monitor if notifications should be sent out when this host or service changes state.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "hostgroup_name": {
                                        "description": "Identifies a hostgroup in op5 Monitor.",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "display_name": {
                                        "description": "This directive is used to define an alternate name that should be displayed in the web interface for this object.",
                                        "type": "string",
                                        "example": "Web Server 1"
                                    },
                                    "servicegroups": {
                                        "description": "A list of service groups that this service is a member of.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "service_group-update-again-2"
                                        }
                                    },
                                    "parallelize_check": {
                                        "description": "Tells op5 Monitor whether the check should be run in parallel with other checks or serial as the only single check being executed at the time.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "check_freshness": {
                                        "description": "This option is used for checking the freshness of a passive service result.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "freshness_threshold": {
                                        "description": "Freshness threshold for passive checks, in seconds.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 300
                                    },
                                    "event_handler": {
                                        "description": "Defines the command that should be run if event handlers are enabled and a status change just occurred.",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "event_handler_args": {
                                        "description": "Arguments to the event handler script.",
                                        "type": "string",
                                        "example": "--arg1 value1"
                                    },
                                    "low_flap_threshold": {
                                        "description": "Flap detection is used to suppress notifications in case of 'unstable' hosts or services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 10
                                    },
                                    "high_flap_threshold": {
                                        "description": "Flap detection is used to suppress notifications in case of 'flapping' hosts or services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 20
                                    },
                                    "flap_detection_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "OK"
                                        }
                                    },
                                    "first_notification_delay": {
                                        "description": "The number of time units (usually minutes) to block notifications after a non-OK (possibly soft) state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 5
                                    },
                                    "contacts": {
                                        "description": "This is a list of the contacts that should be notified whenever there are problems (or recoveries) with this object.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "admin1"
                                        }
                                    },
                                    "contact_groups": {
                                        "description": "List of references to contactgroup_name. Tells monitor which contacts should receive notifications when the service / host in question changes state.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "IT Support"
                                        }
                                    },
                                    "stalking_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "n"
                                        }
                                    },
                                    "notes": {
                                        "description": "A more descriptive information for the host or service.",
                                        "type": "string",
                                        "example": "This is a critical service."
                                    },
                                    "notes_url": {
                                        "description": "A URL of your own choice.",
                                        "type": "string",
                                        "example": "https://example.com/service_notes"
                                    },
                                    "action_url": {
                                        "description": "Define an optional URL that can be used to provide more actions on the host.",
                                        "type": "string",
                                        "example": "https://example.com/actions"
                                    },
                                    "icon_image": {
                                        "description": "Defines the icon that will be used at status pages in the web GUI.",
                                        "type": "string",
                                        "example": "icon.png"
                                    },
                                    "icon_image_alt": {
                                        "description": "Defines the alt text that appears when you put the cursor over the icon.",
                                        "type": "string",
                                        "example": "Service Icon"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service updated successfully"
                                        },
                                        "service": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Services"
                ],
                "summary": "Update a service in Emca Monitor",
                "description": "Updates an existing service with the provided parameters.",
                "operationId": "patchService",
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "description": "ID or Service name, of the service to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resource",
                        "in": "path",
                        "description": "Host or Hostgroup",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parent_type",
                        "in": "query",
                        "description": "Type of the parent (hostgroup)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "hostgroup"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "Service details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "max_check_attempts",
                                    "host_name",
                                    "service_description",
                                    "file_id",
                                    "notification_interval"
                                ],
                                "properties": {
                                    "max_check_attempts": {
                                        "description": "Tells op5 Monitor how many times it should retry a service / host before it changes to HARD.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 3
                                    },
                                    "host_name": {
                                        "description": "Identifies a host in op5 Monitor. Many hosts can share the same IP, but no two hosts can have the same host_name.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 123
                                    },
                                    "service_description": {
                                        "description": "A description of the service in question. This, together with 'host_name', also identifies the service.",
                                        "type": "string",
                                        "example": "Web Server"
                                    },
                                    "check_command": {
                                        "description": "Reference pointer to command_name. This tells Monitor which command should be run to determine the status of the host or service.",
                                        "type": "integer",
                                        "example": "notify-service-by-email"
                                    },
                                    "check_command_args": {
                                        "description": "Arguments that can be passed to the command_name. Some check_commands need arguments and some don't.",
                                        "type": "string",
                                        "example": "--ssl"
                                    },
                                    "obsess": {
                                        "description": "If activated, the obsessive-compulsive service processing (OCSP) command will be executed after each check for this service.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "register": {
                                        "description": "If this is set to on, the object is considered to be part of the configuration. Otherwise, it used as a template.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "file_id": {
                                        "description": "Tells op5 Monitor in which file this object should be stored.",
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/templates/services.cfg"
                                    },
                                    "is_volatile": {
                                        "description": "Volatile services differ from 'normal' services in three important ways.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "check_interval": {
                                        "description": "Tells Monitor how often (in minutes) it should check the services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 5
                                    },
                                    "retry_interval": {
                                        "description": "Tells op5 Monitor how many minutes it should wait before retrying a check that is in a non-OK state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 2
                                    },
                                    "active_checks_enabled": {
                                        "description": "Tells op5 Monitor whether or not active checks should be performed for this host or service.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "passive_checks_enabled": {
                                        "description": "Tells whether this service accepts passive check results or not.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "check_period": {
                                        "description": "This directive is used to specify during which time_period active checks for this host could be executed.",
                                        "type": "string",
                                        "example": "24x7"
                                    },
                                    "event_handler_enabled": {
                                        "description": "Tells op5 Monitor if event handlers (if configured) should be enabled.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "flap_detection_enabled": {
                                        "description": "If a host or service pends between an OK and a not OK state, the host / service enters 'flapping' state.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "process_perf_data": {
                                        "description": "Tells monitor whether or not it should log processing performance data.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "retain_status_information": {
                                        "description": "Tells op5 Monitor whether or not it should auto-save the service's / host's STATUS information.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "retain_nonstatus_information": {
                                        "description": "Tells op5 Monitor whether or not it should auto-save extra information about the host / service every hour.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "notification_interval": {
                                        "description": "Time interval (in minutes) between notifications when a host or service is in a non-OK state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 10
                                    },
                                    "notification_period": {
                                        "description": "Reference to timeperiod_name. Tells monitor during which times notifications should be sent.",
                                        "type": "integer",
                                        "example": "24x7"
                                    },
                                    "notification_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "c,w"
                                        }
                                    },
                                    "notifications_enabled": {
                                        "description": "Tells monitor if notifications should be sent out when this host or service changes state.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "hostgroup_name": {
                                        "description": "Identifies a hostgroup in op5 Monitor.",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "display_name": {
                                        "description": "This directive is used to define an alternate name that should be displayed in the web interface for this object.",
                                        "type": "string",
                                        "example": "Web Server 1"
                                    },
                                    "servicegroups": {
                                        "description": "A list of service groups that this service is a member of.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "service_group-update-again-2"
                                        }
                                    },
                                    "parallelize_check": {
                                        "description": "Tells op5 Monitor whether the check should be run in parallel with other checks or serial as the only single check being executed at the time.",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "check_freshness": {
                                        "description": "This option is used for checking the freshness of a passive service result.",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "freshness_threshold": {
                                        "description": "Freshness threshold for passive checks, in seconds.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 300
                                    },
                                    "event_handler": {
                                        "description": "Defines the command that should be run if event handlers are enabled and a status change just occurred.",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "event_handler_args": {
                                        "description": "Arguments to the event handler script.",
                                        "type": "string",
                                        "example": "--arg1 value1"
                                    },
                                    "low_flap_threshold": {
                                        "description": "Flap detection is used to suppress notifications in case of 'unstable' hosts or services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 10
                                    },
                                    "high_flap_threshold": {
                                        "description": "Flap detection is used to suppress notifications in case of 'flapping' hosts or services.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 20
                                    },
                                    "flap_detection_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "OK"
                                        }
                                    },
                                    "first_notification_delay": {
                                        "description": "The number of time units (usually minutes) to block notifications after a non-OK (possibly soft) state.",
                                        "type": "integer",
                                        "format": "int32",
                                        "example": 5
                                    },
                                    "contacts": {
                                        "description": "This is a list of the contacts that should be notified whenever there are problems (or recoveries) with this object.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "admin1"
                                        }
                                    },
                                    "contact_groups": {
                                        "description": "List of references to contactgroup_name. Tells monitor which contacts should receive notifications when the service / host in question changes state.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "IT Support"
                                        }
                                    },
                                    "stalking_options": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "n"
                                        }
                                    },
                                    "notes": {
                                        "description": "A more descriptive information for the host or service.",
                                        "type": "string",
                                        "example": "This is a critical service."
                                    },
                                    "notes_url": {
                                        "description": "A URL of your own choice.",
                                        "type": "string",
                                        "example": "https://example.com/service_notes"
                                    },
                                    "action_url": {
                                        "description": "Define an optional URL that can be used to provide more actions on the host.",
                                        "type": "string",
                                        "example": "https://example.com/actions"
                                    },
                                    "icon_image": {
                                        "description": "Defines the icon that will be used at status pages in the web GUI.",
                                        "type": "string",
                                        "example": "icon.png"
                                    },
                                    "icon_image_alt": {
                                        "description": "Defines the alt text that appears when you put the cursor over the icon.",
                                        "type": "string",
                                        "example": "Service Icon"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service updated successfully"
                                        },
                                        "service": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/service/{id}": {
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Delete a service in op5 Monitor",
                "description": "Deletes an existing service.",
                "operationId": "deleteService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the service to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/servicegroup": {
            "get": {
                "tags": [
                    "ServiceGroups"
                ],
                "summary": "Get all Service Group or single service in Emca Monitor",
                "description": "Retrieves a list of all Service Group or a specific service by ID or name.",
                "operationId": "getAllservicegroup",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "query",
                        "description": "ID or name of the service (optional)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Service Group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ServiceGroups"
                ],
                "summary": "Create a new ServiceGroup in Emca Monitor",
                "description": "Creates a new ServiceGroup with the provided parameters.",
                "operationId": "createServiceGroups",
                "requestBody": {
                    "description": "ServiceGroup details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "servicegroup_name",
                                    "file_id"
                                ],
                                "properties": {
                                    "servicegroup_name": {
                                        "type": "string",
                                        "example": "service_group"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/localhost.cfg"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "notify-service-by-email"
                                    },
                                    "alias": {
                                        "type": "integer",
                                        "example": "alias"
                                    },
                                    "servicegroup_members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "serviceGroup_member_id"
                                        }
                                    },
                                    "members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "member_id"
                                        }
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "register": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service Group created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service Group created successfully"
                                        },
                                        "service_group": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "Service Group description": [
                                                    "The Service Group description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/servicegroup/{id}": {
            "put": {
                "tags": [
                    "ServiceGroups"
                ],
                "summary": "Update an existing ServiceGroup in Emca Monitor",
                "description": "Updates an existing ServiceGroup with the provided parameters.",
                "operationId": "updateServiceGroups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID or name of the ServiceGroup to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated ServiceGroup details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "servicegroup_name",
                                    "file_id"
                                ],
                                "properties": {
                                    "servicegroup_name": {
                                        "type": "string",
                                        "example": "service_group"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/localhost.cfg"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "notify-service-by-email"
                                    },
                                    "alias": {
                                        "type": "integer",
                                        "example": "alias"
                                    },
                                    "servicegroup_members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "serviceGroup_member_id"
                                        }
                                    },
                                    "members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "member_id"
                                        }
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "register": {
                                        "type": "string",
                                        "example": ""
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service Group updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service Group updated successfully"
                                        },
                                        "service_group": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "Service Group description": [
                                                    "The Service Group description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service Group not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ServiceGroups"
                ],
                "summary": "Delete a specific service group in Emca Monitor",
                "description": "Deletes a service group by ID or name.",
                "operationId": "deleteServiceGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID or name of the service group to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Service group deleted successfully"
                    },
                    "404": {
                        "description": "Service group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Service group not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/config/servicegroup/{serviceGroup}": {
            "patch": {
                "tags": [
                    "ServiceGroups"
                ],
                "summary": "Patch an existing ServiceGroup in Emca Monitor",
                "description": "Partially updates an existing ServiceGroup with the provided parameters.",
                "operationId": "patchServiceGroup",
                "parameters": [
                    {
                        "name": "serviceGroup",
                        "in": "path",
                        "description": "ID or name of the ServiceGroup to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated ServiceGroup details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "servicegroup_name"
                                ],
                                "properties": {
                                    "servicegroup_name": {
                                        "type": "string",
                                        "example": "updated_service_group"
                                    },
                                    "file_id": {
                                        "type": "string",
                                        "example": "/opt/naemon/etc/naemon/conf.d/localhost.cfg"
                                    },
                                    "action_url": {
                                        "type": "string",
                                        "example": "updated_notify-service-by-email"
                                    },
                                    "alias": {
                                        "type": "integer",
                                        "example": "alias"
                                    },
                                    "servicegroup_members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "updated_serviceGroup_member_id"
                                        }
                                    },
                                    "members": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "updated_member_id"
                                        }
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Updated notes"
                                    },
                                    "notes_url": {
                                        "type": "string",
                                        "example": "http://example.com/updated_notes"
                                    },
                                    "register": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service Group patched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service Group patched successfully"
                                        },
                                        "service_group": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "Service Group description": [
                                                    "The Service Group description field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service Group not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service Group not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/status/{type}/{name}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Get the status based on type and name",
                "operationId": "getStatus",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Type of status to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the status to retrieve",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Filter by state",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "state[]",
                        "in": "query",
                        "description": "Filter by multiple states",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "description": "Filter by hard state",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Output format (e.g. xml)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hostgroup",
                        "in": "query",
                        "description": "Filter by hostgroup",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "name": "Authorization",
                "in": "header",
                "scheme": "basic"
            }
        }
    }
}
